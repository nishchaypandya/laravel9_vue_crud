{
  "version": 3,
  "sources": ["../../filepond-plugin-file-poster/dist/filepond-plugin-file-poster.esm.js", "dep:filepond-plugin-file-poster"],
  "sourcesContent": ["/*!\n * FilePondPluginFilePoster 2.5.1\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\nconst IMAGE_SCALE_SPRING_PROPS = {\n  type: 'spring',\n  stiffness: 0.5,\n  damping: 0.45,\n  mass: 10\n};\n\nconst createPosterView = _ =>\n  _.utils.createView({\n    name: 'file-poster',\n    tag: 'div',\n    ignoreRect: true,\n    create: ({ root }) => {\n      root.ref.image = document.createElement('img');\n      root.element.appendChild(root.ref.image);\n    },\n    write: _.utils.createRoute({\n      DID_FILE_POSTER_LOAD: ({ root, props }) => {\n        const { id } = props;\n\n        // get item\n        const item = root.query('GET_ITEM', { id: props.id });\n        if (!item) return;\n\n        // get poster\n        const poster = item.getMetadata('poster');\n        root.ref.image.src = poster;\n\n        // let others know of our fabulous achievement (so the image can be faded in)\n        root.dispatch('DID_FILE_POSTER_DRAW', { id });\n      }\n    }),\n    mixins: {\n      styles: ['scaleX', 'scaleY', 'opacity'],\n      animations: {\n        scaleX: IMAGE_SCALE_SPRING_PROPS,\n        scaleY: IMAGE_SCALE_SPRING_PROPS,\n        opacity: { type: 'tween', duration: 750 }\n      }\n    }\n  });\n\nconst applyTemplate = (source, target) => {\n  // copy width and height\n  target.width = source.width;\n  target.height = source.height;\n\n  // draw the template\n  const ctx = target.getContext('2d');\n  ctx.drawImage(source, 0, 0);\n};\n\nconst createPosterOverlayView = fpAPI =>\n  fpAPI.utils.createView({\n    name: 'file-poster-overlay',\n    tag: 'canvas',\n    ignoreRect: true,\n    create: ({ root, props }) => {\n      applyTemplate(props.template, root.element);\n    },\n    mixins: {\n      styles: ['opacity'],\n      animations: {\n        opacity: { type: 'spring', mass: 25 }\n      }\n    }\n  });\n\nconst getImageSize = (url, cb) => {\n  let image = new Image();\n  image.onload = () => {\n    const width = image.naturalWidth;\n    const height = image.naturalHeight;\n    image = null;\n    cb(width, height);\n  };\n  image.src = url;\n};\n\nconst easeInOutSine = t => -0.5 * (Math.cos(Math.PI * t) - 1);\n\nconst addGradientSteps = (\n  gradient,\n  color,\n  alpha = 1,\n  easeFn = easeInOutSine,\n  steps = 10,\n  offset = 0\n) => {\n  const range = 1 - offset;\n  const rgb = color.join(',');\n  for (let i = 0; i <= steps; i++) {\n    const p = i / steps;\n    const stop = offset + range * p;\n    gradient.addColorStop(stop, `rgba(${rgb}, ${easeFn(p) * alpha})`);\n  }\n};\n\nconst MAX_WIDTH = 10;\nconst MAX_HEIGHT = 10;\n\nconst calculateAverageColor = image => {\n  const scalar = Math.min(MAX_WIDTH / image.width, MAX_HEIGHT / image.height);\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const width = (canvas.width = Math.ceil(image.width * scalar));\n  const height = (canvas.height = Math.ceil(image.height * scalar));\n  ctx.drawImage(image, 0, 0, width, height);\n  let data = null;\n  try {\n    data = ctx.getImageData(0, 0, width, height).data;\n  } catch (e) {\n    return null;\n  }\n  const l = data.length;\n\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  let i = 0;\n\n  for (; i < l; i += 4) {\n    r += data[i] * data[i];\n    g += data[i + 1] * data[i + 1];\n    b += data[i + 2] * data[i + 2];\n  }\n\n  r = averageColor(r, l);\n  g = averageColor(g, l);\n  b = averageColor(b, l);\n\n  return { r, g, b };\n};\n\nconst averageColor = (c, l) => Math.floor(Math.sqrt(c / (l / 4)));\n\nconst drawTemplate = (canvas, width, height, color, alphaTarget) => {\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n\n  const horizontalCenter = width * 0.5;\n\n  const grad = ctx.createRadialGradient(\n    horizontalCenter,\n    height + 110,\n    height - 100,\n    horizontalCenter,\n    height + 110,\n    height + 100\n  );\n\n  addGradientSteps(grad, color, alphaTarget, undefined, 8, 0.4);\n\n  ctx.save();\n  ctx.translate(-width * 0.5, 0);\n  ctx.scale(2, 1);\n  ctx.fillStyle = grad;\n  ctx.fillRect(0, 0, width, height);\n  ctx.restore();\n};\n\nconst hasNavigator = typeof navigator !== 'undefined';\n\nconst width = 500;\nconst height = 200;\n\nconst overlayTemplateShadow = hasNavigator && document.createElement('canvas');\nconst overlayTemplateError = hasNavigator && document.createElement('canvas');\nconst overlayTemplateSuccess = hasNavigator && document.createElement('canvas');\n\nlet itemShadowColor = [40, 40, 40];\nlet itemErrorColor = [196, 78, 71];\nlet itemSuccessColor = [54, 151, 99];\n\nif (hasNavigator) {\n  drawTemplate(overlayTemplateShadow, width, height, itemShadowColor, 0.85);\n  drawTemplate(overlayTemplateError, width, height, itemErrorColor, 1);\n  drawTemplate(overlayTemplateSuccess, width, height, itemSuccessColor, 1);\n}\n\nconst loadImage = (url, crossOriginValue) =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    if (typeof crossOrigin === 'string') {\n      img.crossOrigin = crossOriginValue;\n    }\n    img.onload = () => {\n      resolve(img);\n    };\n    img.onerror = e => {\n      reject(e);\n    };\n    img.src = url;\n  });\n\nconst createPosterWrapperView = _ => {\n  // create overlay view\n  const overlay = createPosterOverlayView(_);\n\n  /**\n   * Write handler for when preview container has been created\n   */\n  const didCreatePreviewContainer = ({ root, props }) => {\n    const { id } = props;\n\n    // we need to get the file data to determine the eventual image size\n    const item = root.query('GET_ITEM', id);\n    if (!item) return;\n\n    // get url to file\n    const fileURL = item.getMetadata('poster');\n\n    // image is now ready\n    const previewImageLoaded = data => {\n      // calculate average image color, is in try catch to circumvent any cors errors\n      const averageColor = root.query(\n        'GET_FILE_POSTER_CALCULATE_AVERAGE_IMAGE_COLOR'\n      )\n        ? calculateAverageColor(data)\n        : null;\n      item.setMetadata('color', averageColor, true);\n\n      // the preview is now ready to be drawn\n      root.dispatch('DID_FILE_POSTER_LOAD', {\n        id,\n        data\n      });\n    };\n\n    // determine image size of this item\n    getImageSize(fileURL, (width, height) => {\n      // we can now scale the panel to the final size\n      root.dispatch('DID_FILE_POSTER_CALCULATE_SIZE', {\n        id,\n        width,\n        height\n      });\n\n      // create fallback preview\n      loadImage(\n        fileURL,\n        root.query('GET_FILE_POSTER_CROSS_ORIGIN_ATTRIBUTE_VALUE')\n      ).then(previewImageLoaded);\n    });\n  };\n\n  /**\n   * Write handler for when the preview has been loaded\n   */\n  const didLoadPreview = ({ root }) => {\n    root.ref.overlayShadow.opacity = 1;\n  };\n\n  /**\n   * Write handler for when the preview image is ready to be animated\n   */\n  const didDrawPreview = ({ root }) => {\n    const { image } = root.ref;\n\n    // reveal image\n    image.scaleX = 1.0;\n    image.scaleY = 1.0;\n    image.opacity = 1;\n  };\n\n  /**\n   * Write handler for when the preview has been loaded\n   */\n  const restoreOverlay = ({ root }) => {\n    root.ref.overlayShadow.opacity = 1;\n    root.ref.overlayError.opacity = 0;\n    root.ref.overlaySuccess.opacity = 0;\n  };\n\n  const didThrowError = ({ root }) => {\n    root.ref.overlayShadow.opacity = 0.25;\n    root.ref.overlayError.opacity = 1;\n  };\n\n  const didCompleteProcessing = ({ root }) => {\n    root.ref.overlayShadow.opacity = 0.25;\n    root.ref.overlaySuccess.opacity = 1;\n  };\n\n  /**\n   * Constructor\n   */\n  const create = ({ root, props }) => {\n    // test if colors aren't default item overlay colors\n    const itemShadowColorProp = root.query(\n      'GET_FILE_POSTER_ITEM_OVERLAY_SHADOW_COLOR'\n    );\n    const itemErrorColorProp = root.query(\n      'GET_FILE_POSTER_ITEM_OVERLAY_ERROR_COLOR'\n    );\n    const itemSuccessColorProp = root.query(\n      'GET_FILE_POSTER_ITEM_OVERLAY_SUCCESS_COLOR'\n    );\n\n    if (itemShadowColorProp && itemShadowColorProp !== itemShadowColor) {\n      itemShadowColor = itemShadowColorProp;\n      drawTemplate(overlayTemplateShadow, width, height, itemShadowColor, 0.85);\n    }\n    if (itemErrorColorProp && itemErrorColorProp !== itemErrorColor) {\n      itemErrorColor = itemErrorColorProp;\n      drawTemplate(overlayTemplateError, width, height, itemErrorColor, 1);\n    }\n    if (itemSuccessColorProp && itemSuccessColorProp !== itemSuccessColor) {\n      itemSuccessColor = itemSuccessColorProp;\n      drawTemplate(overlayTemplateSuccess, width, height, itemSuccessColor, 1);\n    }\n\n    // image view\n    const image = createPosterView(_);\n\n    // append image presenter\n    root.ref.image = root.appendChildView(\n      root.createChildView(image, {\n        id: props.id,\n        scaleX: 1.25,\n        scaleY: 1.25,\n        opacity: 0\n      })\n    );\n\n    // image overlays\n    root.ref.overlayShadow = root.appendChildView(\n      root.createChildView(overlay, {\n        template: overlayTemplateShadow,\n        opacity: 0\n      })\n    );\n\n    root.ref.overlaySuccess = root.appendChildView(\n      root.createChildView(overlay, {\n        template: overlayTemplateSuccess,\n        opacity: 0\n      })\n    );\n\n    root.ref.overlayError = root.appendChildView(\n      root.createChildView(overlay, {\n        template: overlayTemplateError,\n        opacity: 0\n      })\n    );\n  };\n\n  return _.utils.createView({\n    name: 'file-poster-wrapper',\n    create,\n    write: _.utils.createRoute({\n      // image preview stated\n      DID_FILE_POSTER_LOAD: didLoadPreview,\n      DID_FILE_POSTER_DRAW: didDrawPreview,\n      DID_FILE_POSTER_CONTAINER_CREATE: didCreatePreviewContainer,\n\n      // file states\n      DID_THROW_ITEM_LOAD_ERROR: didThrowError,\n      DID_THROW_ITEM_PROCESSING_ERROR: didThrowError,\n      DID_THROW_ITEM_INVALID: didThrowError,\n      DID_COMPLETE_ITEM_PROCESSING: didCompleteProcessing,\n      DID_START_ITEM_PROCESSING: restoreOverlay,\n      DID_REVERT_ITEM_PROCESSING: restoreOverlay\n    })\n  });\n};\n\n/**\n * File Poster Plugin\n */\nconst plugin = fpAPI => {\n  const { addFilter, utils } = fpAPI;\n  const { Type, createRoute } = utils;\n\n  // filePosterView\n  const filePosterView = createPosterWrapperView(fpAPI);\n\n  // called for each view that is created right after the 'create' method\n  addFilter('CREATE_VIEW', viewAPI => {\n    // get reference to created view\n    const { is, view, query } = viewAPI;\n\n    // only hook up to item view and only if is enabled for this cropper\n    if (!is('file') || !query('GET_ALLOW_FILE_POSTER')) return;\n\n    // create the file poster plugin, but only do so if the item is an image\n    const didLoadItem = ({ root, props }) => {\n      updateItemPoster(root, props);\n    };\n\n    const didUpdateItemMetadata = ({ root, props, action }) => {\n      if (!/poster/.test(action.change.key)) return;\n      updateItemPoster(root, props);\n    };\n\n    const updateItemPoster = (root, props) => {\n      const { id } = props;\n      const item = query('GET_ITEM', id);\n\n      // item could theoretically have been removed in the mean time\n      if (!item || !item.getMetadata('poster') || item.archived) return;\n\n      // don't update if is the same poster\n      if (root.ref.previousPoster === item.getMetadata('poster')) return;\n      root.ref.previousPoster = item.getMetadata('poster');\n\n      // test if is filtered\n      if (!query('GET_FILE_POSTER_FILTER_ITEM')(item)) return;\n\n      if (root.ref.filePoster) {\n        view.removeChildView(root.ref.filePoster);\n      }\n\n      // set preview view\n      root.ref.filePoster = view.appendChildView(\n        view.createChildView(filePosterView, { id })\n      );\n\n      // now ready\n      root.dispatch('DID_FILE_POSTER_CONTAINER_CREATE', { id });\n    };\n\n    const didCalculatePreviewSize = ({ root, action }) => {\n      // no poster set\n      if (!root.ref.filePoster) return;\n\n      // remember dimensions\n      root.ref.imageWidth = action.width;\n      root.ref.imageHeight = action.height;\n\n      root.ref.shouldUpdatePanelHeight = true;\n\n      root.dispatch('KICK');\n    };\n\n    const getPosterHeight = ({ root }) => {\n      let fixedPosterHeight = root.query('GET_FILE_POSTER_HEIGHT');\n\n      // if fixed height: return fixed immediately\n      if (fixedPosterHeight) {\n        return fixedPosterHeight;\n      }\n\n      const minPosterHeight = root.query('GET_FILE_POSTER_MIN_HEIGHT');\n      const maxPosterHeight = root.query('GET_FILE_POSTER_MAX_HEIGHT');\n\n      // if natural height is smaller than minHeight: return min height\n      if (minPosterHeight && root.ref.imageHeight < minPosterHeight) {\n        return minPosterHeight;\n      }\n\n      let height =\n        root.rect.element.width * (root.ref.imageHeight / root.ref.imageWidth);\n\n      if (minPosterHeight && height < minPosterHeight) {\n        return minPosterHeight;\n      }\n      if (maxPosterHeight && height > maxPosterHeight) {\n        return maxPosterHeight;\n      }\n\n      return height;\n    };\n\n    // start writing\n    view.registerWriter(\n      createRoute(\n        {\n          DID_LOAD_ITEM: didLoadItem,\n          DID_FILE_POSTER_CALCULATE_SIZE: didCalculatePreviewSize,\n          DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata\n        },\n        ({ root, props }) => {\n          // don't run without poster\n          if (!root.ref.filePoster) return;\n\n          // don't do anything while hidden\n          if (root.rect.element.hidden) return;\n\n          // should we redraw\n          if (root.ref.shouldUpdatePanelHeight) {\n            // time to resize the parent panel\n            root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\n              id: props.id,\n              height: getPosterHeight({ root })\n            });\n\n            // done!\n            root.ref.shouldUpdatePanelHeight = false;\n          }\n        }\n      )\n    );\n  });\n\n  // expose plugin\n  return {\n    options: {\n      // Enable or disable file poster\n      allowFilePoster: [true, Type.BOOLEAN],\n\n      // Fixed preview height\n      filePosterHeight: [null, Type.INT],\n\n      // Min image height\n      filePosterMinHeight: [null, Type.INT],\n\n      // Max image height\n      filePosterMaxHeight: [null, Type.INT],\n\n      // filters file items to determine which are shown as poster\n      filePosterFilterItem: [() => true, Type.FUNCTION],\n\n      // Enables or disables reading average image color\n      filePosterCalculateAverageImageColor: [false, Type.BOOLEAN],\n\n      // Allows setting the value of the CORS attribute (null is don't set attribute)\n      filePosterCrossOriginAttributeValue: ['Anonymous', Type.STRING],\n\n      // Colors used for item overlay gradient\n      filePosterItemOverlayShadowColor: [null, Type.ARRAY],\n      filePosterItemOverlayErrorColor: [null, Type.ARRAY],\n      filePosterItemOverlaySuccessColor: [null, Type.ARRAY]\n    }\n  };\n};\n\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\nconst isBrowser =\n  typeof window !== 'undefined' && typeof window.document !== 'undefined';\nif (isBrowser) {\n  document.dispatchEvent(\n    new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n  );\n}\n\nexport default plugin;\n", "import d from \"./node_modules/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.esm.js\";export default d;"],
  "mappings": "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",
  "names": ["width", "height", "averageColor"]
}
